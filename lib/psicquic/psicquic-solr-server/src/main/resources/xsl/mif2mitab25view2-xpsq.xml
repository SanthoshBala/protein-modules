<xsl:stylesheet version="1.0"
   xmlns:mif="http://psi.hupo.org/mi/mif"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >

<!-- ======================================================================= -->
<!-- XSLT transformation  MIF 2.5.x to MITAB 2.5-like PSICQUIC index         -->
<!--   parameters:                                                           -->
<!--       file - file name                                                  -->
<!--       expand - expansion flag (true/false)                              -->
<!--                                                                         -->
<!--  NOTE: (a) bait/prey (ie spoke) expansion only; retains interaction     -->
<!--            type. The latter should be modified to promote 'association' -->
<!--            to 'physical association'.                                   -->
<!--                                                                         -->
<!--        (b) complex view presented as concatenation of expansion-        -->
<!--            generated binariy interactions with no interaction type      -->
<!--            modification (as in (a))                                     -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!--                                                                         -->
<!-- record/doc PID: <$file>:<entry#>:<int id>:<evid id>[:prt id:pt id]      -->
<!--                                                                         -->  
<!-- ======================================================================= -->

<!--   <xsl:include href="mif2xpsq.xml"/> -->

 <xsl:output method="xml" indent="yes" encoding="UTF-8" />
 <xsl:param name="file"/>
 <xsl:param name="expand"/>
 <xsl:param name="complex"/>
 <xsl:param name="debug">false</xsl:param>

 <xsl:template match="/mif:entrySet">
  <xsl:text>&#xA;</xsl:text>
  <xsl:element name="add">
   <xsl:text>&#xA;</xsl:text>
   <xsl:apply-templates mode="entry" 
     select="mif:entry"/>
  </xsl:element>
  <xsl:text>&#xA;</xsl:text>
 </xsl:template>

 <xsl:template match="*" mode="entry">
   <xsl:apply-templates mode="interaction"
        select="mif:interactionList/mif:interaction">
      <xsl:with-param name="ep" select="position()"/>
      <xsl:with-param name="src" select="mif:source"/>
   </xsl:apply-templates>
 </xsl:template>

 <xsl:template match="*" mode="interaction">
   <xsl:param name="ep"/>
   <xsl:param name="src"/>
   <xsl:variable name="fepi" select="concat($file,':',$ep,':',@id)"/>
   <xsl:variable name="int"  select="."/>

   <xsl:if test="$debug = 'true'">
    <xsl:text>count=</xsl:text>
     <xsl:value-of select="count(mif:participantList/mif:participant)"/>
    <xsl:text>&#xA;</xsl:text> 
   </xsl:if>

     <xsl:if test="count(mif:experimentList/mif:experimentDescription) = 1">
       <xsl:call-template name="evidence">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select='$fepi'/>
         <xsl:with-param name="evd" 
              select='mif:experimentList/mif:experimentDescription[1]'/>
         <xsl:with-param name="int" select='$int'/>  
       </xsl:call-template>
     </xsl:if>
     
     <xsl:if test="count(mif:experimentList/mif:experimentRef) = 1">
       <xsl:call-template name="evidence-ref">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select='$fepi'/>
         <xsl:with-param name="evrl" 
              select="mif:experimentList/mif:experimentRef"/>
         <xsl:with-param name="int" select='$int'/>
       </xsl:call-template>
     </xsl:if>

 </xsl:template>

  <xsl:template name="expand">
   <xsl:param name="src"/> 
   <xsl:param name="fep" />
   <xsl:param name="evd" />
   <xsl:param name="int" />

    <xsl:if test="$debug ='true'">
      <xsl:text>complex size= </xsl:text>
    </xsl:if>

    <xsl:value-of 
           select="count($int/mif:participantList/mif:participant)"/>
    <xsl:text>&#xA;</xsl:text>  
    <xsl:variable name="bait"  
        select="$int/mif:participantList/mif:participant
                  [mif:experimentalRoleList/mif:experimentalRole/
                   mif:names/mif:fullName/text() ='bait'
                  ]"/>

    <xsl:variable name="prey"  
        select="$int/mif:participantList/mif:participant
                 [mif:experimentalRoleList/mif:experimentalRole/
                  mif:names/mif:fullName/text() ='prey'
                 ]"/>

    <xsl:if test="$debug='true'">
      <xsl:text>bait=</xsl:text><xsl:value-of select='$bait/@id'/>
        <xsl:text> :: </xsl:text><xsl:value-of select="count($bait)" />
        <xsl:text> :: </xsl:text><xsl:value-of select="count($prey)" />
      <xsl:text>&#xA;</xsl:text>
      <xsl:text>itp=</xsl:text><xsl:value-of 
                select='$int/mif:interactionType/mif:names/mif:fullName'/> 
      <xsl:text>&#xA;</xsl:text>
    </xsl:if>


    <xsl:if test="count($bait) = 1 and count($prey) &gt; 0 ">
      <xsl:call-template name="record">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select="$fep" />
         <xsl:with-param name="evd" select="$evd" />
         <xsl:with-param name="int" select="$int" />
         <xsl:with-param name="aprt" select="$bait" />
         <xsl:with-param name="bprt" select="$prey" />
         <xsl:with-param name="epid">true</xsl:with-param>
      </xsl:call-template>      
    </xsl:if>
  </xsl:template>

  <xsl:template name="evidence-ref">
    <xsl:param name="src"/>
    <xsl:param name="fep" />
    <xsl:param name="evrl" />
    <xsl:param name="int" />

    <xsl:for-each select='$evrl/text()'>
      <xsl:variable name="rid" select="."/>
      <xsl:call-template name="evidence">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select='$fep'/>
        <xsl:with-param name="evd" 
             select='//mif:experimentList/mif:experimentDescription[@id=$rid]'/>
        <xsl:with-param name="int" select='$int'/>
      </xsl:call-template>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="evidence" >
    <xsl:param name="src"/>
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />

    <xsl:variable name="evid" select="$evd"/>

    <xsl:if test="count($int/mif:participantList/mif:participant) &lt;= 2">

      <!-- first participant -->

      <xsl:variable name="a"
           select="$int/mif:participantList/mif:participant[1]"/>

      <!-- second participant -->

      <xsl:variable name="b"
           select="$int/mif:participantList/mif:participant[last()]"/>

      <xsl:call-template name="record">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select="$fep" />
        <xsl:with-param name="evd" select="$evd" />
        <xsl:with-param name="int" select="$int" />
        <xsl:with-param name="aprt" select="$a" />
        <xsl:with-param name="bprt" select="$b" />
      </xsl:call-template>
    
   </xsl:if>

   <xsl:if test="$expand ='true'">
     <xsl:if test="count($int/mif:participantList/mif:participant) &gt; 2">
      <xsl:call-template name="expand">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select='$fep'/>  
        <xsl:with-param name="evd" select='$evd'/>
        <xsl:with-param name="int" select='$int'/>               
      </xsl:call-template>
     </xsl:if>
   </xsl:if>

   <xsl:if test="$complex ='true'">
     <xsl:if test="count($int/mif:participantList/mif:participant) &gt; 2">

      <xsl:variable name="bait"
        select="$int/mif:participantList/mif:participant
                  [mif:experimentalRoleList/mif:experimentalRole/
                   mif:names/mif:fullName/text() ='bait'
                  ]"/>

      <xsl:variable name="prey"
        select="$int/mif:participantList/mif:participant
                 [mif:experimentalRoleList/mif:experimentalRole/
                  mif:names/mif:fullName/text() ='prey'
                 ]"/>
      <xsl:if test="count($bait) = 1 and count($prey) &gt; 0">   

        <xsl:call-template name="complex-record">
          <xsl:with-param name="src" select='$src'/>
          <xsl:with-param name="fep" select="$fep" />
          <xsl:with-param name="evd" select="$evd" />
          <xsl:with-param name="int" select="$int" />
          <xsl:with-param name="aprt" select="$bait" />
          <xsl:with-param name="bprt" select="$prey" />
         </xsl:call-template>
      </xsl:if> 

     </xsl:if>
   </xsl:if>

  </xsl:template>
  
  <!-- ===================================================================== -->
  <!-- build document/record                                                 -->
  <!-- ===================================================================== -->

  <xsl:template name="complex-record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />

    <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;complex-record&#xA;</xsl:text>
    </xsl:if>  

    <xsl:element name="doc">
      <xsl:element name="field">
        <xsl:attribute name="name">recId</xsl:attribute>
        <xsl:value-of select="concat($fep,':',$evd/@id,':cx')"/>
      </xsl:element>
        
      <xsl:element name="field">
        <xsl:attribute name="name">view</xsl:attribute>

        <xsl:for-each select='$aprt'>
          <xsl:variable name="a" select='.'/>
            <xsl:for-each select='$bprt'>
              <xsl:variable name="b" select='.'/>

              <xsl:if test="$debug = 'true'">           
                <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
                  <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
                <xsl:text>&#xA;</xsl:text>
              </xsl:if>
 
             <xsl:call-template name="binary-view">
               <xsl:with-param name="src" select="$src" />
               <xsl:with-param name="fep" select="$fep" />
               <xsl:with-param name="evd" select="$evd" />
               <xsl:with-param name="int" select="$int" />
               <xsl:with-param name="a" select="$a" />
               <xsl:with-param name="b" select="$b" />
               <xsl:with-param name="debug" select="$debug" />
             </xsl:call-template> 
             <!-- <xsl:text>&#xA;</xsl:text> -->
            </xsl:for-each>
          </xsl:for-each>

        </xsl:element>
    </xsl:element>
 </xsl:template>

<!-- ======================================================================= -->

  <xsl:template name="record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />
    <xsl:param name="epid">false</xsl:param>


    <xsl:for-each select='$aprt'>
      <xsl:variable name="a" select='.'/>
        <xsl:for-each select='$bprt'>
          <xsl:variable name="b" select='.'/>

          <xsl:if test="$debug = 'true'">   
            <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
             <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
            <xsl:text>&#xA;</xsl:text>
          </xsl:if>

          <xsl:element name="doc">
           <xsl:element name="field">
             <xsl:attribute name="name">recId</xsl:attribute>
             <xsl:if test="$epid = 'false'">
              <xsl:value-of select="concat($fep,':',$evd/@id)"/>
             </xsl:if>
             <xsl:if test="$epid = 'true'">
              <xsl:value-of select="concat($fep,':',$evd/@id,
                                           ':',$a/@id,':',$b/@id)" />
             </xsl:if>
           </xsl:element> 

           <xsl:element name="field">
             <xsl:attribute name="name">view</xsl:attribute>
              
           <xsl:call-template name="binary-view">
             <xsl:with-param name="src" select="$src" />
             <xsl:with-param name="fep" select="$fep" />
             <xsl:with-param name="evd" select="$evd" />
             <xsl:with-param name="int" select="$int" />
             <xsl:with-param name="a" select="$a" />
             <xsl:with-param name="b" select="$b" />
             <xsl:with-param name="debug" select="$debug" />
           </xsl:call-template> 

          </xsl:element>      

        </xsl:element>
        <xsl:text>&#xA;</xsl:text>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:template>

<!-- ======================================================================= -->
<!-- ======================================================================= -->

  <xsl:template name="binary-view">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="a" />
    <xsl:param name="b" />
    <xsl:param name="debug">true</xsl:param> 
  
    <xsl:call-template name="p9t-id-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::idA</xsl:with-param>
               <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-id-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::idB</xsl:with-param>
               <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-aid-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::aidA</xsl:with-param>
               <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-aid-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::aidB</xsl:with-param>
               <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-alias-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::aliasA</xsl:with-param>
               <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-alias-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::aliasB</xsl:with-param>
               <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="cv-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::idm</xsl:with-param>
               <xsl:with-param name="cv" 
                  select="$evd/mif:interactionDetectionMethod"/>
     </xsl:call-template>

     <xsl:call-template name="na-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::auth</xsl:with-param>
     </xsl:call-template>

     <xsl:call-template name="xref-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::pubid</xsl:with-param>
               <xsl:with-param name="xref" 
                    select="$evd/mif:bibref/mif:xref/*"/>
     </xsl:call-template>

     <xsl:call-template name="p9t-taxid-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::taxidA</xsl:with-param>
               <xsl:with-param name="p9t" select="$a"/>
     </xsl:call-template>

     <xsl:call-template name="p9t-taxid-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::taxidB</xsl:with-param>
               <xsl:with-param name="p9t" select="$b"/>
     </xsl:call-template>

     <xsl:call-template name="cv-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::itp</xsl:with-param>
               <xsl:with-param name="cv" select="$int/mif:interactionType"/>
      </xsl:call-template>

      <xsl:call-template name="src-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::src</xsl:with-param>
               <xsl:with-param name="src" select="$src"/>
      </xsl:call-template>
   
      <xsl:call-template name="imexid-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::imex</xsl:with-param>
               <xsl:with-param name="i9n" select="$int"/>
      </xsl:call-template>

      <xsl:call-template name="na-col">
               <xsl:with-param name="debug" select='$debug'/>
               <xsl:with-param name="tag">::confscr</xsl:with-param>
      </xsl:call-template>

      <xsl:text>&#xA;</xsl:text>
     
  </xsl:template>

<!-- ======================================================================= -->
<!-- columns/fields                                                          -->
<!-- ======================================================================= -->

  <xsl:template name="p9t-id-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="iid"
                 select="$p9t/mif:interactorRef/text()"/>
    <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />

   <xsl:call-template name="xref-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="xref" 
         select="$p9t/mif:interactor/mif:xref/mif:primaryRef
           | $ilst[@id=$iid]/mif:xref/mif:primaryRef"/>
   </xsl:call-template>  
   <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
   </xsl:if> 
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="p9t-aid-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />
   <xsl:variable name="iid"
                 select="$p9t/mif:interactorRef/text()"/>            

   <xsl:call-template name="xref-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="xref" 
        select="$p9t/mif:interactor/mif:xref/mif:secondaryRef
          | $ilst[@id=$iid]/mif:xref/mif:secondaryRef"/>
   </xsl:call-template>  
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>  
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="p9t-alias-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="iid"
                  select="$p9t/mif:interactorRef/text()"/>
   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />

    <xsl:call-template name="alias-fld">
      <xsl:with-param name="i9r" 
        select="$p9t/mif:interactor/mif:names/mif:shortLabel
                | $p9t/mif:interactor/mif:names/mif:fullName
                | $ilst[@id=$iid]/mif:names/mif:shortLabel
                | $ilst[@id=$iid]/mif:names/mif:fullName"/>
    </xsl:call-template>
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>    
  </xsl:template>

  <xsl:template name="p9t-taxid-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="iid"
                  select="$p9t/mif:interactorRef/text()"/>
   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />            

   <xsl:call-template name="taxid-fld">
         <xsl:with-param name="tag" select="$tag" />
         <xsl:with-param name="org" 
           select="$p9t/mif:interactor/mif:organism
                   |$ilst[@id=$iid]/mif:organism"/>
   </xsl:call-template>  

   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

 <xsl:template name="na-col">
   <xsl:param name="tag"/>
    <xsl:param name="debug"/>

    <xsl:text>N/A</xsl:text>
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="xref-col">
   <xsl:param name="xref"/>
   <xsl:param name="tag"/>
   <xsl:param name="debug"/>   

   <xsl:choose>
    <xsl:when test="$xref/@dbAc = 'MI:0486'">
     <xsl:text>uniprotkb</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of select="$xref/@db"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:text>:</xsl:text>
   <xsl:value-of select='$xref/@id'/>
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="xref-fld">
   <xsl:param name="xref"/>
   <xsl:for-each select='$xref'>
     <xsl:if test="position() &gt; 1">
        <xsl:text>|</xsl:text>
     </xsl:if>
     <xsl:choose>
       <xsl:when test="./@dbAc = 'MI:0486'">
         <xsl:text>uniprotkb</xsl:text>
       </xsl:when>
       <xsl:otherwise>
         <xsl:value-of select="./@db"/>
       </xsl:otherwise>
     </xsl:choose>
     <xsl:text>:</xsl:text>
     <xsl:value-of select='./@id'/>
   </xsl:for-each>
 </xsl:template>

 <xsl:template name="alias-col">
   <xsl:param name="tag" />
   <xsl:param name="i9r" />
    <xsl:text>"</xsl:text>
    <xsl:value-of select="$i9r/mif:names/mif:shortLabel"/>
    <xsl:text>"|"</xsl:text>
    <xsl:value-of select="$i9r/mif:names/mif:fullName"/>
    <xsl:text>"</xsl:text>
    <xsl:value-of select="$tag"/>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="alias-fld">
   <xsl:param name="i9r" />
   
    <xsl:for-each select='$i9r'>
               
      <xsl:if test="position() &gt; 1">
        <xsl:text>|</xsl:text>
      </xsl:if>
      <xsl:text>"</xsl:text>
      <xsl:value-of select="."/>
      <xsl:text>"</xsl:text>
     
     </xsl:for-each>
  </xsl:template>

 <xsl:template match="*" mode="q-list">
    <xsl:text>***</xsl:text>
     <xsl:for-each select='.'>
      <xsl:value-of select="position()"/>
     <xsl:if test="position() &gt; 1">
       <xsl:text>|</xsl:text>
     </xsl:if>
     <xsl:text>"</xsl:text>
     <xsl:value-of select="."/>
     <xsl:text>"</xsl:text>
    </xsl:for-each>
 </xsl:template>

 <xsl:template name="cv-col">
  <xsl:param name="tag" />
  <xsl:param name="cv" />
  <xsl:param name="debug"/>
  
   <xsl:value-of select="$cv/mif:xref/mif:primaryRef/@db"/>
   <xsl:text>:"</xsl:text>
   <xsl:value-of select="$cv/mif:xref/mif:primaryRef/@id"/>
   <xsl:text>"(</xsl:text>
   <xsl:value-of select="$cv/mif:names/mif:fullName"/>
   <xsl:text>)</xsl:text>
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="taxid-col">
  <xsl:param name="tag" />
  <xsl:param name="org" /> 
   <xsl:text>taxid:</xsl:text><xsl:value-of select="$org/@ncbiTaxId"/>
   <xsl:value-of select="$tag"/>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="taxid-fld">
  <xsl:param name="org" /> 
   <xsl:text>taxid:</xsl:text>
   <xsl:value-of select="$org/@ncbiTaxId"/>
   <xsl:text>(</xsl:text>
   <xsl:value-of select="$org/mif:names/mif:fullName"/>
   <xsl:text>)</xsl:text>
 </xsl:template>

 <xsl:template name="imexid-col">
   <xsl:param name="tag" />
   <xsl:param name="i9n" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="$i9n/@imexId">
        <xsl:text>imex:</xsl:text><xsl:value-of select="$i9n/@imexId"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:text>N/A</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="src-col">
   <xsl:param name="tag" />
   <xsl:param name="src" />
    <xsl:param name="debug"/>

    <xsl:value-of select="$src/mif:xref/mif:primaryRef/@db"/>
    <xsl:text>:"</xsl:text>
    <xsl:value-of select="$src/mif:xref/mif:primaryRef/@id"/>
    <xsl:text>"(</xsl:text>
    <xsl:value-of select="$src/mif:names/mif:shortLabel"/> 
    <xsl:text>)</xsl:text> 
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
 </xsl:template>

</xsl:stylesheet>
