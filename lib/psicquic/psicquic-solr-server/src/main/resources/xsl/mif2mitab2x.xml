<xsl:stylesheet version="1.0"
   xmlns:mif="http://psi.hupo.org/mi/mif"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >

<!-- ======================================================================= -->
<!-- XSLT transformation  MIF 2.5.x to MITAB 2.5/2.7-like PSICQUIC index     -->
<!--   parameters:                                                           -->
<!--       file - file name                                                  -->
<!--       expand - expansion flag (true/false)                              -->
<!--                                                                         -->
<!--  NOTE: bait/prey (ie spoke) expansion only; retains interaction type.   -->
<!--        The latter should be modified to promote 'association'           -->
<!--        to 'physical association'.                                       -->
<!-- ======================================================================= -->
<!--                                                                         -->
<!-- record/doc PID: <$file>:<entry#>:<int id>:<evid id>[:prt id:pt id]      -->
<!--                                                                         -->
<!-- ======================================================================= -->

  <xsl:param name="debug">false</xsl:param>
  <xsl:param name="format">2.6</xsl:param>
  <xsl:param name="natext">-</xsl:param>

  <xsl:include href="mif2xpsq.xml"/> 
  
  <!-- ===================================================================== -->
  <!-- build document/complex-record                                         -->
  <!-- ===================================================================== -->

  <xsl:template name="complex-record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />

    <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;complex-record&#xA;</xsl:text>
    </xsl:if>  

    <xsl:element name="doc">
      <xsl:element name="field">
        <xsl:attribute name="name">recId</xsl:attribute>
        <xsl:value-of select="concat($fep,':',$evd/@id,':cx')"/>
      </xsl:element>
        
      <xsl:element name="field">
        <xsl:attribute name="name">view</xsl:attribute>

        <xsl:for-each select='$aprt'>
          <xsl:variable name="a" select='.'/>
            <xsl:for-each select='$bprt'>
              <xsl:variable name="b" select='.'/>

              <xsl:if test="$debug = 'true'">           
                <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
                  <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
                <xsl:text>&#xA;</xsl:text>
              </xsl:if>
 
             <xsl:call-template name="binary-view">
               <xsl:with-param name="src" select="$src" />
               <xsl:with-param name="fep" select="$fep" />
               <xsl:with-param name="evd" select="$evd" />
               <xsl:with-param name="int" select="$int" />
               <xsl:with-param name="a" select="$a" />
               <xsl:with-param name="b" select="$b" />
               <xsl:with-param name="debug" select="$debug" />
             </xsl:call-template> 
             <!-- <xsl:text>&#xA;</xsl:text> -->
            </xsl:for-each>
          </xsl:for-each>

        </xsl:element>
    </xsl:element>
 </xsl:template>

<!-- ======================================================================= -->

  <xsl:template name="record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />
    <xsl:param name="epid">false</xsl:param>
    <xsl:param name="expand"/>

    <xsl:for-each select='$aprt'>
      <xsl:variable name="a" select='.'/>
        <xsl:for-each select='$bprt'>
          <xsl:variable name="b" select='.'/>

          <xsl:if test="$debug = 'true'">   
            <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
             <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
            <xsl:text>&#xA;</xsl:text>
          </xsl:if>

          <xsl:element name="doc">
           <xsl:element name="field">
             <xsl:attribute name="name">recId</xsl:attribute>
             <xsl:if test="$epid = 'false'">
              <xsl:value-of select="concat($fep,':',$evd/@id)"/>
             </xsl:if>
             <xsl:if test="$epid = 'true'">
              <xsl:value-of select="concat($fep,':',$evd/@id,
                                           ':',$a/@id,':',$b/@id)" />
             </xsl:if>
           </xsl:element> 

           <xsl:element name="field">
             <xsl:attribute name="name">view</xsl:attribute>
              
           <xsl:call-template name="binary-view">
             <xsl:with-param name="src" select="$src" />
             <xsl:with-param name="fep" select="$fep" />
             <xsl:with-param name="evd" select="$evd" />
             <xsl:with-param name="int" select="$int" />
             <xsl:with-param name="a" select="$a" />
             <xsl:with-param name="b" select="$b" />
             <xsl:with-param name="debug" select="$debug" />
             <xsl:with-param name="expand" select="$expand"/>
           </xsl:call-template> 

          </xsl:element>      

        </xsl:element>
        <xsl:text>&#xA;</xsl:text>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:template>

<!-- ======================================================================= -->
<!-- ======================================================================= -->

  <xsl:template name="binary-view">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="a" />
    <xsl:param name="b" />
    <xsl:param name="expand" />
    <xsl:param name="debug">true</xsl:param> 

    <xsl:call-template name="p9t-id-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::idA</xsl:with-param>
      <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-id-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::idB</xsl:with-param>
      <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-aid-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::aidA</xsl:with-param>
      <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-aid-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::aidB</xsl:with-param>
      <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-alias-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::aliasA</xsl:with-param>
      <xsl:with-param name="src" select="$src"/>
      <xsl:with-param name="p9t" select="$a"/>
    </xsl:call-template>

    <xsl:call-template name="p9t-alias-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::aliasB</xsl:with-param>
      <xsl:with-param name="src" select="$src"/>
      <xsl:with-param name="p9t" select="$b"/>
    </xsl:call-template>

    <xsl:call-template name="cv-col">
      <xsl:with-param name="debug" select='$debug'/>
      <xsl:with-param name="tag">::idm</xsl:with-param>
      <xsl:with-param name="cv" 
           select="$evd/mif:interactionDetectionMethod"/>
     </xsl:call-template>

     <xsl:apply-templates mode="pubauth-col" 
       select="$evd/mif:attributeList[
                  ./mif:attribute/@name='author-list']">
       <xsl:with-param name="debug" select='$debug'/>
       <xsl:with-param name="tag">::auth</xsl:with-param>
     </xsl:apply-templates>

     <xsl:apply-templates mode="pubid-col" select="$evd" >
       <xsl:with-param name="debug" select='$debug'/>
       <xsl:with-param name="tag">::pubid</xsl:with-param>
     </xsl:apply-templates>

     <xsl:call-template name="p9t-taxid-col">
       <xsl:with-param name="debug" select='$debug'/>
       <xsl:with-param name="tag">::taxidA</xsl:with-param>
       <xsl:with-param name="p9t" select="$a"/>
     </xsl:call-template>

     <xsl:call-template name="p9t-taxid-col">
       <xsl:with-param name="debug" select='$debug'/>
       <xsl:with-param name="tag">::taxidB</xsl:with-param>
       <xsl:with-param name="p9t" select="$b"/>
     </xsl:call-template>

     <xsl:call-template name="cv-col">
       <xsl:with-param name="debug" select='$debug'/>
       <xsl:with-param name="tag">::itp</xsl:with-param>
       <xsl:with-param name="cv" select="$int/mif:interactionType"/>
      </xsl:call-template>

      <xsl:call-template name="src-col">
        <xsl:with-param name="debug" select='$debug'/>
        <xsl:with-param name="tag">::src</xsl:with-param>
        <xsl:with-param name="src" select="$src"/>
      </xsl:call-template>
   
      <xsl:call-template name="intid-col">
        <xsl:with-param name="debug" select='$debug'/>
        <xsl:with-param name="tag">::intid</xsl:with-param>
        <xsl:with-param name="intid" 
             select="$int/mif:xref/*[@refType='identity']"/>
      </xsl:call-template>
   
      <xsl:call-template name="confidence-col">
        <xsl:with-param name="debug" select='$debug'/>
        <xsl:with-param name="tag">::confscr</xsl:with-param>
        <xsl:with-param name="clist" select="$int/mif:confidenceList"/>
      </xsl:call-template>

      <xsl:if test="$format = '2.6' or $format = '2.7'">

        <xsl:call-template name="expansion-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::expand</xsl:with-param>
          <xsl:with-param name="expand" select='$expand'/>
        </xsl:call-template>

        <xsl:call-template name="role-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::bioroleA</xsl:with-param>
          <xsl:with-param name="role" select="$a/mif:biologicalRole"/>
        </xsl:call-template>
  
        <xsl:call-template name="role-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::bioroleB</xsl:with-param>
          <xsl:with-param name="role" select="$b/mif:biologicalRole"/>
        </xsl:call-template>

        <xsl:call-template name="role-list-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::exproleA</xsl:with-param>
          <xsl:with-param name="rolelist" 
               select="$a/mif:experimentalRoleList/*"/>
        </xsl:call-template>

        <xsl:call-template name="role-list-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::exproleB</xsl:with-param>
          <xsl:with-param name="rolelist" 
               select="$b/mif:experimentalRoleList/*"/>
        </xsl:call-template>

        <xsl:call-template name="intype-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::intypeA</xsl:with-param>
          <xsl:with-param name="p9t" select="$a"/>
        </xsl:call-template>
  
        <xsl:call-template name="intype-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::intypeB</xsl:with-param>
          <xsl:with-param name="p9t" select="$b"/>
        </xsl:call-template>

        <xsl:call-template name="p9t-xref-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::xrefA</xsl:with-param>
          <xsl:with-param name="p9t" select="$a"/>
        </xsl:call-template>
  
        <xsl:call-template name="p9t-xref-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::xrefB</xsl:with-param>
          <xsl:with-param name="p9t" select="$b"/>
        </xsl:call-template>
  
        <xsl:call-template name="xref-col">          <!-- ??? -->
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::xref</xsl:with-param>
          <xsl:with-param name="xref" 
               select="$int/mif:xref/*[@refType!='identity']"/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::annoA</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
  
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::annoB</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
  
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::anno</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
  
        <xsl:call-template name="host-list-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::host</xsl:with-param>
          <xsl:with-param name="hlist" select="$evd/mif:hostOrganismList"/>
        </xsl:call-template>
  
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::params</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::crDate</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::upDate</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::chkA</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::chkB</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
        
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::intChk</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
        
        <xsl:call-template name="text-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::negative</xsl:with-param>
          <xsl:with-param name="text" select="$int/mif:negative/text()"/>
        </xsl:call-template>
        
      </xsl:if>

      <xsl:if test="$format = '2.7'">

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::featA</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::featB</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::stoichA</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag">::stoichB</xsl:with-param>
          <xsl:with-param name="clist" select="."/>
        </xsl:call-template>

        <xsl:choose>
          <xsl:when test="count($a/mif:participantIdentificationMethodList
                                  /mif:participantIdentificationMethod) = 0">
           <!-- from experiment -->
            <xsl:call-template name="cvterm-col">
              <xsl:with-param name="debug" select='$debug'/>
              <xsl:with-param name="tag">::pmethA</xsl:with-param>
              <xsl:with-param name="cvterm" 
                   select="$evd/mif:participantIdentificationMethod"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
           <!-- from participant -->
            <xsl:call-template name="cvterm-col">
              <xsl:with-param name="debug" select='$debug'/>
              <xsl:with-param name="tag">::pmethB</xsl:with-param>
              <xsl:with-param name="cvterm" 
                   select="$a/mif:participantIdentificationMethodList
                             /mif:participantIdentificationMethod"/>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>

        <xsl:choose>
          <xsl:when test="count($b/mif:participantIdentificationMethodList
                                  /mif:participantIdentificationMethod) = 0">
           <!-- from experiment -->
            <xsl:call-template name="cvterm-col">
              <xsl:with-param name="debug" select='$debug'/>
              <xsl:with-param name="tag">::pmethA</xsl:with-param>
              <xsl:with-param name="cvterm" 
                   select="$evd/mif:participantIdentificationMethod"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
           <!-- from participant -->
            <xsl:call-template name="cvterm-col">
              <xsl:with-param name="debug" select='$debug'/>
              <xsl:with-param name="tag">::pmethB</xsl:with-param>
              <xsl:with-param name="cvterm" 
                   select="$b/mif:participantIdentificationMethodList
                             /mif:participantIdentificationMethod"/>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>        
      </xsl:if>

      <xsl:text>&#xA;</xsl:text>
     
  </xsl:template>

<!-- ======================================================================= -->
<!-- columns/fields                                                          -->
<!-- ======================================================================= -->

  <xsl:template name="p9t-id-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="iid"
                 select="$p9t/mif:interactorRef/text()"/>
    <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />

   <xsl:call-template name="xref-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="xref" 
         select="$p9t/mif:interactor/mif:xref/mif:primaryRef
           | $ilst[@id=$iid]/mif:xref/mif:primaryRef"/>
   </xsl:call-template>  
   <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
   </xsl:if> 
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="p9t-aid-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />
   <xsl:variable name="iid"
                 select="$p9t/mif:interactorRef/text()"/>            

   <xsl:call-template name="xref-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="xref" 
        select="$p9t/mif:interactor/mif:xref/
                            mif:secondaryRef[@refType='secondary-ac' or
                                             @refType='identity']
          | $ilst[@id=$iid]/mif:xref/
                            mif:secondaryRef[@refType='secondary-ac' or
                                             @refType='identity']"/>
   </xsl:call-template>  
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>  
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="p9t-xref-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="debug"/>

   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />
   <xsl:variable name="iid"
                 select="$p9t/mif:interactorRef/text()"/>            

   <xsl:call-template name="xref-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="xref" 
        select="$p9t/mif:interactor/mif:xref/
                            mif:secondaryRef[not(@refType='secondary-ac' or
                                                 @refType='identity')]
          | $ilst[@id=$iid]/mif:xref/
                            mif:secondaryRef[not(@refType='secondary-ac' or
                                                 @refType='identity')]"/>
   </xsl:call-template>  

   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>  
   <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="p9t-alias-col">
   <xsl:param name="tag"/>
   <xsl:param name="p9t"/>
   <xsl:param name="src"/>
   <xsl:param name="debug"/>

   <xsl:variable name="iid"
                  select="$p9t/mif:interactorRef/text()"/>
   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />

   <xsl:if test="count($p9t/mif:interactor/mif:names/mif:shortLabel|
                       $ilst[@id=$iid]/mif:names/mif:shortLabel) = 1">    

     <xsl:call-template name="alias-fld"> 
       <xsl:with-param name="prefix" 
            select="concat($src/mif:names/mif:shortLabel,':')"/>
       <xsl:with-param name="value" 
            select="$p9t/mif:interactor/mif:names/mif:shortLabel|
                    $ilst[@id=$iid]/mif:names/mif:shortLabel" />
       <xsl:with-param name="type">(short label)</xsl:with-param>        
     </xsl:call-template>

   </xsl:if>

   <xsl:if test=" count($p9t/mif:interactor/mif:names/mif:shortLabel|
                        $ilst[@id=$iid]/mif:names/mif:shortLabel) = 1 
                  and 
                  count($p9t/mif:interactor/mif:names/mif:fullName|
                        $ilst[@id=$iid]/mif:names/mif:fullName) = 1">

     <xsl:text>|</xsl:text>
   </xsl:if>

   <xsl:if test="count($p9t/mif:interactor/mif:names/mif:fullName|
                       $ilst[@id=$iid]/mif:names/mif:fullName) = 1">
     <xsl:call-template name="alias-fld"> 
       <xsl:with-param name="prefix"
            select="concat($src/mif:names/mif:shortLabel,':')"/>
       <xsl:with-param name="value"
            select="$p9t/mif:interactor/mif:names/mif:fullName|
                    $ilst[@id=$iid]/mif:names/mif:fullName"/>
       <xsl:with-param name="type">(full name)</xsl:with-param>        
     </xsl:call-template>

   </xsl:if>
   <xsl:for-each select="$p9t/mif:interactor/mif:names/mif:alias|
                         $ilst[@id=$iid]/mif:names/mif:alias">
        <xsl:text>|</xsl:text>
        <xsl:value-of select="concat($src/mif:names/mif:shortLabel,
                                     ':',./text(),'(',./@type,')')"/>
   </xsl:for-each>

    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>    
   </xsl:template>

  <xsl:template name="p9t-taxid-col">
    <xsl:param name="tag"/>
    <xsl:param name="p9t"/>
    <xsl:param name="debug"/>

    <xsl:variable name="iid"
                  select="$p9t/mif:interactorRef/text()"/>
    <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />            

    <xsl:call-template name="taxid-fld">
      <xsl:with-param name="tag" select="$tag" />
      <xsl:with-param name="org" 
           select="$p9t/mif:interactor/mif:organism
                   |$ilst[@id=$iid]/mif:organism"/>
    </xsl:call-template>  

    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template mode="pubauth-col" match="*">
    <xsl:param name="tag"/>
    <xsl:param name="debug"/>
     
    <xsl:value-of select="concat(
        substring-before(./mif:attribute[@name='author-list'],' '),
        ' et al. (',./mif:attribute[@name='publication year'], ')')" />  
   
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template mode="pubid-col" match="*">
    <xsl:param name="tag"/>
    <xsl:param name="debug"/>

    <xsl:for-each select="./mif:bibref/mif:xref/*|
                          ./mif:xref/*[@refType='imex-primary']" >
       <xsl:value-of select="concat(./@db, ':&quot;', ./@id, '&quot;(',
                                    ./@refType, ')' )"/>
       <xsl:if test="not(position()=last())">
         <xsl:text>|</xsl:text>
       </xsl:if>
    </xsl:for-each>

    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="na-col">
   <xsl:param name="tag"/>
    <xsl:param name="debug"/>
      <xsl:value-of select="$natext"/>   
     <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="xref-col">
   <xsl:param name="xref"/>
   <xsl:param name="tag"/>
   <xsl:param name="debug"/>   

   <xsl:choose>
    <xsl:when test="$xref/@dbAc = 'MI:0486'">
     <xsl:text>uniprotkb</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:value-of select="$xref/@db"/>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:text>:</xsl:text>
   <xsl:value-of select='$xref/@id'/>
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="xref-fld">
   <xsl:param name="xref"/>
   <xsl:for-each select='$xref'>
     <xsl:if test="position() &gt; 1">
        <xsl:text>|</xsl:text>
     </xsl:if>
     <xsl:choose>
       <xsl:when test="./@dbAc = 'MI:0486'">
         <xsl:text>uniprotkb</xsl:text>
       </xsl:when>
       <xsl:otherwise>
         <xsl:value-of select="./@db"/>
       </xsl:otherwise>
     </xsl:choose>
     <xsl:value-of select="concat(':&quot;',./@id,'&quot;')"/>
   </xsl:for-each>
 </xsl:template>

 <xsl:template name="alias-col">
   <xsl:param name="tag" />
   <xsl:param name="i9r" />
    <xsl:text>"</xsl:text>
    <xsl:value-of select="$i9r/mif:names/mif:shortLabel"/>
    <xsl:text>"|"</xsl:text>
    <xsl:value-of select="$i9r/mif:names/mif:fullName"/>
    <xsl:text>"</xsl:text>
    <xsl:value-of select="$tag"/>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="alias-fld">
    <xsl:param name="prefix" />
    <xsl:param name="value" />
    <xsl:param name="type" />
    <xsl:value-of select="$prefix"/>
    <xsl:value-of select="$value"/>
    <xsl:value-of select="$type"/>
 </xsl:template>

 <xsl:template match="*" mode="q-list">
    <xsl:text>***</xsl:text>
     <xsl:for-each select='.'>
      <xsl:value-of select="position()"/>
     <xsl:if test="position() &gt; 1">
       <xsl:text>|</xsl:text>
     </xsl:if>
     <xsl:text>"</xsl:text>
     <xsl:value-of select="."/>
     <xsl:text>"</xsl:text>
    </xsl:for-each>
 </xsl:template>

 <xsl:template name="cv-col">
  <xsl:param name="tag" />
  <xsl:param name="cv" />
  <xsl:param name="debug"/>
  
   <xsl:value-of select="$cv/mif:xref/mif:primaryRef/@db"/>
   <xsl:text>:"</xsl:text>
   <xsl:value-of select="$cv/mif:xref/mif:primaryRef/@id"/>
   <xsl:text>"(</xsl:text>
   <xsl:value-of select="$cv/mif:names/mif:fullName"/>
   <xsl:text>)</xsl:text>
   <xsl:if test="$debug = 'true'">
    <xsl:value-of select="$tag"/>
   </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="taxid-col">
  <xsl:param name="tag" />
  <xsl:param name="org" /> 
   <xsl:text>taxid:</xsl:text><xsl:value-of select="$org/@ncbiTaxId"/>
   <xsl:value-of select="$tag"/>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

  <xsl:template name="taxid-fld">
    <xsl:param name="org" />
    
    <xsl:if test="count(./mif:names/mif:shortLabel) = 1">
      <xsl:value-of select="concat( 'taxid:',$org/@ncbiTaxId,'(&quot;',
                                        $org/mif:names/mif:shortLabel,
                                        '&quot;)' )" />
    </xsl:if>
    <xsl:if test="count($org/mif:names/mif:shortLabel) = 1 and
                      count($org/mif:names/mif:fullName) = 1">
          <xsl:text>|</xsl:text>
    </xsl:if>
    <xsl:if test="count($org/mif:names/mif:fullName) = 1">
          <xsl:value-of select="concat( 'taxid:',$org/@ncbiTaxId,'(&quot;',
                                        $org/mif:names/mif:fullName,
                                        '&quot;)' )" />
    </xsl:if>
  </xsl:template>

 <xsl:template name="imexid-col">
   <xsl:param name="tag" />
   <xsl:param name="i9n" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="$i9n/@imexId">
        <xsl:text>imex:</xsl:text><xsl:value-of select="$i9n/@imexId"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:value-of select="$natext"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
   <xsl:text>&#x9;</xsl:text>
 </xsl:template>

 <xsl:template name="src-col">
   <xsl:param name="tag" />
   <xsl:param name="src" />
    <xsl:param name="debug"/>

    <xsl:value-of select="$src/mif:xref/mif:primaryRef/@db"/>
    <xsl:text>:"</xsl:text>
    <xsl:value-of select="$src/mif:xref/mif:primaryRef/@id"/>
    <xsl:text>"(</xsl:text>
    <xsl:value-of select="$src/mif:names/mif:shortLabel"/> 
    <xsl:text>)</xsl:text> 
    <xsl:if test="$debug = 'true'">
     <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
 </xsl:template>

  <xsl:template name="confidence-col">
    <xsl:param name="tag" />
    <xsl:param name="clist" />
    <xsl:param name="debug"/>

    <xsl:choose>
     <xsl:when test="count($clist/mif:confidence) &gt; 0 ">      
       <xsl:for-each select="$clist/mif:confidence">
         <xsl:value-of
           select="concat(./mif:unit/mif:names/mif:shortLabel/text(), ':',
                          ./mif:value/text() )" />
         <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
       </xsl:for-each>
     </xsl:when>
     <xsl:otherwise>
       <xsl:value-of select="$natext"/> 
     </xsl:otherwise>
   </xsl:choose>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
     </xsl:if>
     <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="intid-col">
    <xsl:param name="tag" />
    <xsl:param name="intid" />
    <xsl:param name="debug"/>

    <xsl:choose>
     <xsl:when test="count($intid) &gt; 0 ">
       <xsl:call-template name="xref-fld">
         <xsl:with-param name="xref" select="$intid" />
       </xsl:call-template>
    </xsl:when>
     <xsl:otherwise>
       <xsl:value-of select="$natext"/>
     </xsl:otherwise>
   </xsl:choose>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
     </xsl:if>
     <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="expansion-col">
    <xsl:param name="tag" />
    <xsl:param name="expand" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="not($expand ='')">    
        <xsl:if test="$expand='spoke'">
          <xsl:value-of select="concat('psi-mi:',
                                       '&quot;MI:1060&quot;',
                                      '(spoke expansion)')"/>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$natext"/>
      </xsl:otherwise>
    </xsl:choose>    
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="role-list-col">
    <xsl:param name="tag" />
    <xsl:param name="rolelist" />
    <xsl:param name="debug"/>
    <xsl:for-each select="$rolelist">
      <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':&quot;',
                                     ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
      <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="role-col">
    <xsl:param name="tag" />
    <xsl:param name="role" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="not($role = '')">    
        <xsl:call-template name="cvterm-fld">
          <xsl:with-param name="cvterm" select='$role'/>
        </xsl:call-template>   
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$natext"/>
      </xsl:otherwise>
    </xsl:choose>    
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="cvterm-col">
    <xsl:param name="tag" />
    <xsl:param name="cvterm" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="not($cvterm= '')">    
        <xsl:value-of 
             select="concat($cvterm/mif:xref/mif:primaryRef/@db,':&quot;',
                            $cvterm/mif:xref/mif:primaryRef/@id,'&quot;(',
                            $cvterm/mif:names/mif:shortLabel/text(),')')" />   
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag" select='$tag'/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>    
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="cvterm-list-col">
    <xsl:param name="tag" />
    <xsl:param name="cvlist" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="count($cvlist) &gt; 0 ">    
        <xsl:for-each select="*">
          <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':&quot;',
                                       ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                       ./mif:names/mif:shortLabel/text(),')')" />
          <xsl:if test="not(position()=last())">
            <xsl:text>|</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="na-col">
          <xsl:with-param name="debug" select='$debug'/>
          <xsl:with-param name="tag" select='$tag'/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>
  
  <xsl:template name="cvterm-fld">
    <xsl:param name="tag" />
    <xsl:param name="cvterm" />
    <xsl:param name="debug"/>
    <xsl:choose>
      <xsl:when test="not($cvterm= '')">    
        <xsl:value-of 
             select="concat($cvterm/mif:xref/mif:primaryRef/@db,':&quot;',
                            $cvterm/mif:xref/mif:primaryRef/@id,'&quot;(',
                            $cvterm/mif:names/mif:shortLabel/text(),')')" />   
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$natext"/>        
      </xsl:otherwise>
    </xsl:choose>    
  </xsl:template>

  <xsl:template name="intype-col">
    <xsl:param name="tag"/>
    <xsl:param name="p9t"/>
    <xsl:param name="debug"/>

    <xsl:variable name="iid"
                  select="$p9t/mif:interactorRef/text()"/>
    <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />            

    <xsl:call-template name="cvterm-fld">
      <xsl:with-param name="cvterm" 
           select="$p9t/mif:interactor/mif:interactorType
                   |$ilst[@id=$iid]/mif:interactorType"/>
    </xsl:call-template>  

    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="host-list-col">
    <xsl:param name="tag" />
    <xsl:param name="hlist" />
    <xsl:param name="debug"/>
    <xsl:for-each select="$hlist/*">
      <xsl:value-of select="concat('taxid:',./@ncbiTaxId,'(&quot;',
                                     ./mif:names/mif:shortLabel/text(),
                                     '&quot;)')" />
      <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
      </xsl:if>
    </xsl:for-each>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="text-col">
    <xsl:param name="tag" />
    <xsl:param name="text" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="$text = ''">
        <xsl:value-of select="$natext"/>   
      </xsl:when>   
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

  <xsl:template name="pmeth-col">
    <xsl:param name="tag" />
    <xsl:param name="text" />
    <xsl:param name="debug"/>

    <xsl:choose>
      <xsl:when test="$text = ''">
        <xsl:value-of select="$natext"/> 
      </xsl:when>   
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="$debug = 'true'">
      <xsl:value-of select="$tag"/>
    </xsl:if>
    <xsl:text>&#x9;</xsl:text>
  </xsl:template>

</xsl:stylesheet>
