<xsl:stylesheet version="1.0"
   xmlns:mif="http://psi.hupo.org/mi/mif"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >

<!-- ======================================================================= -->
<!-- XSLT transformation  MIF 2.5.x to MITAB 2.5-like PSICQUIC index         -->
<!--   parameters:                                                           -->
<!--       file - file name                                                  -->
<!--       expand - expansion flag (true/false)                              -->
<!--                                                                         -->
<!--  NOTE: bait/prey (ie spoke) expansion only; retains interaction type.   -->
<!--        The latter should be modified to promote 'association'           -->
<!--        to 'physical association'.                                       -->                                   
<!-- ======================================================================= -->
<!--                                                                         -->
<!-- record/doc PID: <$file>:<entry#>:<int id>:<evid id>[:prt id:pt id]      -->
<!--                                                                         -->  
<!-- ======================================================================= -->

 <xsl:output method="xml" indent="yes" encoding="UTF-8" />
 <xsl:param name="file"/>
 <xsl:param name="expand"/>
 <xsl:param name="complex"/>
<!--  <xsl:param name="debug">false</xsl:param> -->

 <xsl:template match="/mif:entrySet">
  <xsl:text>&#xA;</xsl:text>
  <xsl:element name="add">
   <xsl:text>&#xA;</xsl:text>
   <xsl:apply-templates mode="entry" 
     select="mif:entry"/>
  </xsl:element>
  <xsl:text>&#xA;</xsl:text>
 </xsl:template>

 <xsl:template match="*" mode="entry">
   <xsl:apply-templates mode="interaction"
        select="mif:interactionList/mif:interaction">
      <xsl:with-param name="ep" select="position()"/>
      <xsl:with-param name="src" select="mif:source"/>
   </xsl:apply-templates>
 </xsl:template>

 <xsl:template match="*" mode="interaction">
   <xsl:param name="ep"/>
   <xsl:param name="src"/>
   <xsl:variable name="fepi" select="concat($file,':',$ep,':',@id)"/>
   <xsl:variable name="int"  select="."/>

   <xsl:if test="$debug = 'true'">
    <xsl:text>count=</xsl:text>
     <xsl:value-of select="count(mif:participantList/mif:participant)"/>
    <xsl:text>&#xA;</xsl:text> 
   </xsl:if>

     <xsl:if test="count(mif:experimentList/mif:experimentDescription) = 1">
       <xsl:call-template name="evidence">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select='$fepi'/>
         <xsl:with-param name="evd" 
              select='mif:experimentList/mif:experimentDescription[1]'/>
         <xsl:with-param name="int" select='$int'/>  
       </xsl:call-template>
     </xsl:if>
     
     <xsl:if test="count(mif:experimentList/mif:experimentRef) = 1">
       <xsl:call-template name="evidence-ref">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select='$fepi'/>
         <xsl:with-param name="evrl" 
              select="mif:experimentList/mif:experimentRef"/>
         <xsl:with-param name="int" select='$int'/>
       </xsl:call-template>
     </xsl:if>

 </xsl:template>

  <xsl:template name="expand">
   <xsl:param name="src"/> 
   <xsl:param name="fep" />
   <xsl:param name="evd" />
   <xsl:param name="int" />

    <xsl:if test="$debug ='true'">
      <xsl:text>complex size= </xsl:text>
    </xsl:if>

    <xsl:value-of 
           select="count($int/mif:participantList/mif:participant)"/>
    <xsl:text>&#xA;</xsl:text>  
    <xsl:variable name="bait"  
        select="$int/mif:participantList/mif:participant
                  [mif:experimentalRoleList/mif:experimentalRole/
                   mif:names/mif:fullName/text() ='bait'
                  ]"/>

    <xsl:variable name="prey"  
        select="$int/mif:participantList/mif:participant
                 [mif:experimentalRoleList/mif:experimentalRole/
                  mif:names/mif:fullName/text() ='prey'
                 ]"/>

    <xsl:if test="$debug='true'">
      <xsl:text>bait=</xsl:text><xsl:value-of select='$bait/@id'/>
        <xsl:text> :: </xsl:text><xsl:value-of select="count($bait)" />
        <xsl:text> :: </xsl:text><xsl:value-of select="count($prey)" />
      <xsl:text>&#xA;</xsl:text>
      <xsl:text>itp=</xsl:text><xsl:value-of 
                select='$int/mif:interactionType/mif:names/mif:fullName'/> 
      <xsl:text>&#xA;</xsl:text>
    </xsl:if>


    <xsl:if test="count($bait) = 1 and count($prey) &gt; 0 ">
      <xsl:call-template name="record">
         <xsl:with-param name="src" select='$src'/>
         <xsl:with-param name="fep" select="$fep" />
         <xsl:with-param name="evd" select="$evd" />
         <xsl:with-param name="int" select="$int" />
         <xsl:with-param name="aprt" select="$bait" />
         <xsl:with-param name="bprt" select="$prey" />
         <xsl:with-param name="epid">true</xsl:with-param>
      </xsl:call-template>      
    </xsl:if>
  </xsl:template>

  <xsl:template name="evidence-ref">
    <xsl:param name="src"/>
    <xsl:param name="fep" />
    <xsl:param name="evrl" />
    <xsl:param name="int" />

    <xsl:for-each select='$evrl/text()'>
      <xsl:variable name="rid" select="."/>
      <xsl:call-template name="evidence">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select='$fep'/>
        <xsl:with-param name="evd" 
             select='//mif:experimentList/mif:experimentDescription[@id=$rid]'/>
        <xsl:with-param name="int" select='$int'/>
      </xsl:call-template>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="evidence" >
    <xsl:param name="src"/>
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />

    <xsl:variable name="evid" select="$evd"/>

    <xsl:if test="count($int/mif:participantList/mif:participant) &lt;= 2">

      <!-- first participant -->

      <xsl:variable name="a"
           select="$int/mif:participantList/mif:participant[1]"/>

      <!-- second participant -->

      <xsl:variable name="b"
           select="$int/mif:participantList/mif:participant[last()]"/>

      <xsl:call-template name="record">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select="$fep" />
        <xsl:with-param name="evd" select="$evd" />
        <xsl:with-param name="int" select="$int" />
        <xsl:with-param name="aprt" select="$a" />
        <xsl:with-param name="bprt" select="$b" />
      </xsl:call-template>
    
   </xsl:if>

   <xsl:if test="$expand ='true'">
     <xsl:if test="count($int/mif:participantList/mif:participant) &gt; 2">
      <xsl:call-template name="expand">
        <xsl:with-param name="src" select='$src'/>
        <xsl:with-param name="fep" select='$fep'/>  
        <xsl:with-param name="evd" select='$evd'/>
        <xsl:with-param name="int" select='$int'/>               
      </xsl:call-template>
     </xsl:if>
   </xsl:if>

   <xsl:if test="$complex ='true'">
     <xsl:if test="count($int/mif:participantList/mif:participant) &gt; 2">

      <xsl:variable name="bait"
        select="$int/mif:participantList/mif:participant
                  [mif:experimentalRoleList/mif:experimentalRole/
                   mif:names/mif:fullName/text() ='bait'
                  ]"/>

      <xsl:variable name="prey"
        select="$int/mif:participantList/mif:participant
                 [mif:experimentalRoleList/mif:experimentalRole/
                  mif:names/mif:fullName/text() ='prey'
                 ]"/>
      <xsl:if test="count($bait) = 1 and count($prey) &gt; 0">   

        <xsl:call-template name="complex-record">
          <xsl:with-param name="src" select='$src'/>
          <xsl:with-param name="fep" select="$fep" />
          <xsl:with-param name="evd" select="$evd" />
          <xsl:with-param name="int" select="$int" />
          <xsl:with-param name="aprt" select="$bait" />
          <xsl:with-param name="bprt" select="$prey" />
         </xsl:call-template>
      </xsl:if> 

     </xsl:if>
   </xsl:if>

  </xsl:template>
  
</xsl:stylesheet>
