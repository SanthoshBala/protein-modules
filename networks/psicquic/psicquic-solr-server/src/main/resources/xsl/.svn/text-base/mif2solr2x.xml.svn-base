<xsl:stylesheet version="1.0"
   xmlns:mif="http://psi.hupo.org/mi/mif"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >

<!-- ======================================================================= -->
<!-- XSLT transformation  MIF 2.5.x to MITAB 2.5/2.7-like PSICQUIC index     -->
<!--   parameters:                                                           -->
<!--       file - file name                                                  -->
<!--       expand - expansion flag (true/false)                              -->
<!--                                                                         -->
<!--  NOTE: bait/prey (ie spoke) expansion only; retains interaction type.   -->
<!--        The latter should be modified to promote 'association'           -->
<!--        to 'physical association'.                                       -->
<!-- ======================================================================= -->
<!--                                                                         -->
<!-- record/doc PID: <$file>:<entry#>:<int id>:<evid id>[:prt id:pt id]      -->
<!--                                                                         -->
<!-- ======================================================================= -->

  <xsl:param name="debug">false</xsl:param>
  <xsl:param name="format">2.7</xsl:param>

  <xsl:include href="mif2xpsq.xml"/> 
  <!-- ===================================================================== -->
  <!-- build document/complex-record                                         -->
  <!-- ===================================================================== -->

  <xsl:template name="complex-record">

    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />

    <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;complex-record&#xA;</xsl:text>
    </xsl:if>

    <xsl:element name="doc">
      <xsl:element name="field">
        <xsl:attribute name="name">recId</xsl:attribute>
        <xsl:value-of select="concat($fep,':',$evd/@id,':cx')"/>
      </xsl:element>
    
      <!-- participants: both fidA and fidB -->

      <xsl:for-each select='$aprt|$bprt'>            

        <xsl:if test="count(./mif:interactor) = 1">
          <xsl:variable name="i9r" select="./mif:interactor"/>

           <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="p11t" select="."/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="fid">A</xsl:with-param>
           </xsl:call-template>
         </xsl:if>

         <xsl:if test="count(./mif:interactorRef) = 1">
             <xsl:variable name="iid"
                  select="./mif:interactorRef/text()"/>
             <xsl:variable name="i9r"
                  select="//mif:interactorList/mif:interactor[@id=$iid]"/>

             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="p11t" select="."/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="fid">A</xsl:with-param>
             </xsl:call-template>
         </xsl:if>
           
         <xsl:if test="count(./mif:interactor) = 1">
          <xsl:variable name="i9r" select="./mif:interactor"/>

           <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="p11t" select="."/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="fid">B</xsl:with-param>
           </xsl:call-template>
         </xsl:if>

         <xsl:if test="count(./mif:interactorRef) = 1">
             <xsl:variable name="iid"
                  select="./mif:interactorRef/text()"/>
             <xsl:variable name="i9r"
                  select="//mif:interactorList/mif:interactor[@id=$iid]"/>

             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="p11t" select="."/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="fid">B</xsl:with-param>
             </xsl:call-template>
         </xsl:if>
      </xsl:for-each>     
   
      <!-- pubauth -->

      <xsl:apply-templates mode="pubauth" 
           select="$evd/mif:attributeList[
                   ./mif:attribute/@name='author-list']">  
         <xsl:with-param name="fid">pubauth</xsl:with-param>
      </xsl:apply-templates>

      <!-- pubid -->

      <xsl:apply-templates mode="pubid" 
           select="$evd/mif:bibref/mif:xref/*">
        <xsl:with-param name="fid">pubid</xsl:with-param>
      </xsl:apply-templates>
           
      <!-- type --> 
           
      <xsl:apply-templates mode="_cvterm" 
           select="$int/mif:interactionType">
        <xsl:with-param name="fid">type</xsl:with-param>
      </xsl:apply-templates>

      <!-- detmethod --> 

      <xsl:apply-templates mode="_cvterm"
           select="$evd/mif:interactionDetectionMethod">
        <xsl:with-param name="fid">detmethod</xsl:with-param>
      </xsl:apply-templates>
      
      <!-- host organism -->
        
      <xsl:apply-templates mode="host-list"
           select="$evd/mif:hostOrganismList" >                  
      </xsl:apply-templates>

      <!-- interaction_id -->

      <xsl:apply-templates mode="xref" 
           select="$int/mif:xref/*[@refType='identity']" >
        <xsl:with-param name="fid">interaction_id</xsl:with-param>
      </xsl:apply-templates>            
           
      <!-- xref -->

      <xsl:apply-templates mode="xref" 
           select="$int/mif:xref/*[@refType!='identity']" >       
         <xsl:with-param name="fid">xref</xsl:with-param>
      </xsl:apply-templates>          

      <!-- source -->

      <xsl:apply-templates mode="source" select="$src"/>

      <!-- confidence list-->

      <xsl:apply-templates mode="confidence-list" 
           select="$int/mif:confidenceList"/>
    
      <!-- negative -->

      <xsl:apply-templates mode="int-negative"
           select="$int/mif:negative" />

    </xsl:element>    
  </xsl:template>

  <!-- ===================================================================== -->
  <!-- build document/record                                                 -->
  <!-- ===================================================================== -->
 
  <xsl:template name="record">
    <xsl:param name="fep" />
    <xsl:param name="src" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />
    <xsl:param name="epid">false</xsl:param>
    <xsl:param name="expand"/>


    <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;binary-record&#xA;</xsl:text>
    </xsl:if>

    <xsl:for-each select='$aprt'>
      <xsl:variable name="a" select='.'/>
        <xsl:for-each select='$bprt'>
          <xsl:variable name="b" select='.'/>

        <xsl:if test="$debug = 'true'">         
         <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
             <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
         <xsl:text>&#xA;</xsl:text>
        </xsl:if>

         <xsl:element name="doc">

           <xsl:element name="field">
             <xsl:attribute name="name">recId</xsl:attribute>
             <xsl:if test="$epid = 'false'">
              <xsl:value-of select="concat($fep,':',$evd/@id)"/>
             </xsl:if>
             <xsl:if test="$epid = 'true'">
              <xsl:value-of select="concat($fep,':',$evd/@id,
                                           ':',$a/@id,':',$b/@id)" />
             </xsl:if>
           </xsl:element> 

           <!-- first participant -->

           <xsl:if test="count($a/mif:interactor) = 1">
             <xsl:variable name="i9r" select="$a/mif:interactor"/>


            <xsl:if test="$debug = 'true'">
              <xsl:text>&#xA;interactor A&#xA;</xsl:text>
             </xsl:if>

             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="p11t" select="$a"/>
               <xsl:with-param name="fid">A</xsl:with-param>
             </xsl:call-template>

           </xsl:if>

           <xsl:if test="count($a/mif:interactorRef) = 1">
             <xsl:variable name="iid"
                  select="$a/mif:interactorRef/text()"/>                 
             <xsl:variable name="i9r"
                  select="//mif:interactorList/mif:interactor[@id=$iid]"/>

             <xsl:if test="$debug = 'true'">
              <xsl:text>&#xA;interactor-ref A&#xA;</xsl:text>
             </xsl:if>

             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="p11t" select="$a"/>
               <xsl:with-param name="fid">A</xsl:with-param>
             </xsl:call-template>

           </xsl:if>
           
           <!-- second participant -->
           
           <xsl:if test="count($b/mif:interactor) = 1">
             <xsl:variable name="i9r" select="$b/mif:interactor"/>
             
             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="p11t" select="$b"/>
               <xsl:with-param name="fid">B</xsl:with-param>
             </xsl:call-template>
           </xsl:if>
           
           <xsl:if test="count($b/mif:interactorRef) = 1">
             <xsl:variable name="iid"
                  select="$b/mif:interactorRef/text()"/>                 
             <xsl:variable name="i9r"
                  select="//mif:interactorList/mif:interactor[@id=$iid]"/>
             
             <xsl:call-template name="interactor">
               <xsl:with-param name="i9r" select="$i9r"/>
               <xsl:with-param name="evd" select="$evd"/>
               <xsl:with-param name="p11t" select="$b"/>
               <xsl:with-param name="fid">B</xsl:with-param>
             </xsl:call-template>

           </xsl:if>

           <!-- pubauth -->

           <xsl:apply-templates mode="pubauth" 
              select="$evd/mif:attributeList[
                         ./mif:attribute/@name='author-list']">  
             <xsl:with-param name="fid">pubauth</xsl:with-param>
           </xsl:apply-templates>

           <!-- pubid -->

           <xsl:apply-templates mode="pubid" select="$evd" >
             <xsl:with-param name="fid">pubid</xsl:with-param>
           </xsl:apply-templates>
          
           <!-- type --> 
           
          <xsl:apply-templates mode="_cvterm" 
               select="$int/mif:interactionType">
            <xsl:with-param name="fid">type</xsl:with-param>
          </xsl:apply-templates>

          <!-- detmethod --> 

          <xsl:apply-templates mode="_cvterm"
               select="$evd/mif:interactionDetectionMethod">
            <xsl:with-param name="fid">detmethod</xsl:with-param>
          </xsl:apply-templates>

          <!-- host organism -->
        
          <xsl:apply-templates mode="host-list"
             select="$evd/mif:hostOrganismList" >                  
          </xsl:apply-templates>

          <!-- interaction_id -->

          <xsl:apply-templates mode="xref" 
             select="$int/mif:xref/*[@refType='identity']" >
              <xsl:with-param name="fid">interaction_id</xsl:with-param>
          </xsl:apply-templates>            
           
          <!-- xref -->

          <xsl:apply-templates mode="xref" 
             select="$int/mif:xref/*[@refType!='identity']" >       
            <xsl:with-param name="fid">xref</xsl:with-param>
          </xsl:apply-templates>          

          <!-- source -->

          <xsl:apply-templates mode="source" select="$src"/>

          <!-- confidence list-->

          <xsl:apply-templates mode="confidence-list" 
            select="$int/mif:confidenceList"/>

          <!-- complex expansion -->
          
          <xsl:if test= "$expand = 'spoke'" >
            <xsl:call-template name="spoke" />
          </xsl:if>

          <!-- negative -->

          <xsl:apply-templates mode="int-negative"
               select="$int/mif:negative" />

        </xsl:element>
        <xsl:text>&#xA;</xsl:text>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:template>
  
<!-- ======================================================================= -->
<!-- interactor/participant fields                                           -->
<!-- ======================================================================= -->
  
  <xsl:template  name="interactor">
     <xsl:param name="i9r" />
     <xsl:param name="p11t" />     
     <xsl:param name="evd" />
     <xsl:param name="fid" />

   <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;template:interactor&#xA;</xsl:text>
    </xsl:if>
 
     <!-- id<n>/id -->

     <xsl:call-template name="id"> 
       <xsl:with-param name="p11t" select="$p11t"/>
       <xsl:with-param name="fid" select="concat('id',$fid)"/>
     </xsl:call-template>

     <xsl:call-template name="altid">
       <xsl:with-param name="p11t" select="$p11t"/>
       <xsl:with-param name="fid" select="concat('altid',$fid)"/>
     </xsl:call-template>

    <!-- alias -->

     <xsl:apply-templates mode="alias" select="$i9r/mif:names">
       <xsl:with-param name="fid" select="concat('alias',$fid)"/>
     </xsl:apply-templates>
    <!-- taxid<n> -->

     <xsl:apply-templates mode="taxid" 
          select="$i9r/mif:organism">
        <xsl:with-param name="fmode"></xsl:with-param>
        <xsl:with-param name="fid" select="concat('taxid',$fid)" />
     </xsl:apply-templates>
     
     <xsl:apply-templates mode="taxid" 
          select="$i9r/mif:organism">
        <xsl:with-param name="fmode">_s</xsl:with-param>
        <xsl:with-param name="fid" select="concat('taxid',$fid)" />
     </xsl:apply-templates>
     
     <xsl:apply-templates mode="taxid" 
          select="$i9r/mif:organism">
        <xsl:with-param name="fmode">_o</xsl:with-param>
        <xsl:with-param name="fid" select="concat('taxid',$fid)" />
     </xsl:apply-templates>

     <!-- roles -->

     <xsl:apply-templates mode="role" 
       select="$p11t/mif:biologicalRole">
       <xsl:with-param name="fid" select="concat('pbiorole',$fid)" />      
     </xsl:apply-templates> 

     <xsl:apply-templates mode="role-list" 
       select="$p11t/mif:experimentalRoleList">
       <xsl:with-param name="fid" select="concat('pexprole',$fid)" />      
     </xsl:apply-templates>

     <!-- interactor type -->

     <xsl:apply-templates mode="i9r-type"
       select="$i9r/mif:interactorType">
       <xsl:with-param name="fid" select="concat('ptype',$fid)" />
     </xsl:apply-templates>
 
     <!-- participant id -->

     <xsl:choose>
       <xsl:when test="count($i9r/mif:participantIdentificationMethodList
                                  /mif:participantIdentificationMethod) = 0">     
        <!-- from experiment -->
         <xsl:apply-templates mode="_cvterm"
              select="$evd/mif:participantIdentificationMethod">
           <xsl:with-param name="fid" select="concat('pmethod',$fid)" />
         </xsl:apply-templates> 
       </xsl:when>
       <xsl:otherwise>
         <!-- from participant -->
         <xsl:apply-templates mode="_cvterm_list"
              select="$i9r/mif:participantIdentificationMethodList">
           <xsl:with-param name="fid" select="concat('pmethod',$fid)" />
         </xsl:apply-templates>
       </xsl:otherwise>
     </xsl:choose>

  </xsl:template>

<!-- ======================================================================= -->
<!-- field types/modes                                                       -->
<!-- ======================================================================= -->

 <xsl:template match="*" mode="id">
   <xsl:param name="fid"/>

   <xsl:element name="field">
     <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
     <xsl:value-of select=".//@id"/>
   </xsl:element>
 </xsl:template>

 <!-- XREF  --> 

 <xsl:template match="*" mode="xref">
   <xsl:param name="fid"/>
   <xsl:param name="fmode"/>

     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>  
       </xsl:attribute>
       <xsl:choose>
         <xsl:when test=".//@dbAc = 'MI:0486'">
           <xsl:text>uniprotkb:</xsl:text><xsl:value-of select=".//@id"/>
         </xsl:when>
         <xsl:otherwise>
           <xsl:value-of select=".//@db"/>:<xsl:value-of select=".//@id"/>
        </xsl:otherwise>
      </xsl:choose>
     </xsl:element>

   <xsl:if test="$fmode = ''">   
     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
       </xsl:attribute>
       <xsl:value-of select=".//@id"/>
     </xsl:element>

     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
       </xsl:attribute>
       <xsl:choose>
         <xsl:when test=".//@dbAc = 'MI:0486'">
           <xsl:text>uniprotkb</xsl:text>
         </xsl:when>
         <xsl:otherwise>
           <xsl:value-of select=".//@db"/>
        </xsl:otherwise>
      </xsl:choose>
     </xsl:element>
   </xsl:if>

 </xsl:template>

 <!-- ID --> 

 <xsl:template name="id">
   <xsl:param name="fid"/>
   <xsl:param name="p11t"/>
   <xsl:param name="debug"/>
   <xsl:param name="type">false</xsl:param>

   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />
   <xsl:variable name="iid"
                 select="$p11t/mif:interactorRef/text()"/>

   <xsl:call-template name="xref-list">
     <xsl:with-param name="type" select="$type" />
     <xsl:with-param name="list" 
          select="$p11t/mif:interactor/mif:xref/mif:primaryRef
                  | $ilst[@id=$iid]/mif:xref/mif:primaryRef"/>
     <xsl:with-param name="fid" select="$fid"/>
   </xsl:call-template>

 </xsl:template>

 <!-- ALTID --> 

 <xsl:template name="altid">
   <xsl:param name="fid"/>
   <xsl:param name="p11t"/>
   <xsl:param name="debug"/>
   <xsl:param name="type">false</xsl:param>

   <xsl:variable name="ilst" select='//mif:interactorList/mif:interactor' />
   <xsl:variable name="iid"
                 select="$p11t/mif:interactorRef/text()"/>

   <xsl:call-template name="xref-list">
     <xsl:with-param name="type" select="$type"/>
     <xsl:with-param name="list" 
          select="$p11t/mif:interactor/mif:xref/
                        mif:secondaryRef[@refType='secondary-ac' or
                                         @refType='identity']
                  | $ilst[@id=$iid]/mif:xref/
                              mif:secondaryRef[@refType='secondary-ac' or
                                               @refType='identity']"/>
     <xsl:with-param name="fid" select="$fid"/>
   </xsl:call-template>

 </xsl:template>

 <!-- ALIAS -->

 <xsl:template match="*" mode="alias">
   <xsl:param name="fid"/>

    <xsl:apply-templates mode="_alias" 
       select="./mif:fullName|./mif:shortLabel|./mif:alias">
        <xsl:with-param name="fmode"></xsl:with-param>
        <xsl:with-param name="fid" select="$fid"/>
    </xsl:apply-templates>

    <xsl:apply-templates mode="_alias"
      select="./mif:fullName|./mif:shortLabel|./mif:alias">
        <xsl:with-param name="fmode">_s</xsl:with-param>
        <xsl:with-param name="fid" select="$fid"/>
    </xsl:apply-templates>

    <xsl:element name="field">
      <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>

      <xsl:if test="count(./mif:fullName) = 1">
        <xsl:value-of select="concat(./mif:fullName/text(),'(full name)')"/>
      </xsl:if>
      <xsl:if test="count(./mif:fullName) = 1 and count(./mif:shortLabel) = 1">
        <xsl:text>|</xsl:text>
      </xsl:if>
      <xsl:if test="count(./mif:shortLabel) = 1">
        <xsl:value-of select="concat(./mif:shortLabel/text(),
                                     '(short label)' )"/>
      </xsl:if>

      <xsl:for-each select="./mif:alias">
        <xsl:text>|</xsl:text>
        <xsl:value-of select="concat(./text(),'(',./@type,')')"/>
      </xsl:for-each>
    </xsl:element>
  </xsl:template>

  <xsl:template match="*" mode="_alias">
    <xsl:param name="fid"/> 
    <xsl:element name="field">
      <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
      <xsl:value-of select="text()"/>      
    </xsl:element>
  </xsl:template>

 <!-- PUBAUTH -->

  <xsl:template match="*" mode="pubauth">
    <xsl:param name="fid"/>

      <xsl:variable name="pa" select="concat( 
          substring-before(./mif:attribute[@name='author-list'],' '),
          ' et al. (',./mif:attribute[@name='publication year'], ')')" />

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="$pa" />
      </xsl:element>
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="$pa" />
      </xsl:element>
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_o')"/>
        </xsl:attribute>
        <xsl:value-of select="$pa" />
      </xsl:element>
 
  </xsl:template>
  
 <!-- PUBID -->

  <xsl:template match="*" mode="pubid">
    <xsl:param name="fid"/>

    <xsl:for-each select="./mif:bibref/mif:xref/*|
                          ./mif:xref/*[@refType='imex-primary']" >
  
      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select=".//@db"/>
      </xsl:element>
      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select=".//@id"/>
      </xsl:element>
      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="concat(.//@db,':',.//@id)"/>
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(.//@db,':',.//@id)"/>
      </xsl:element>
    </xsl:for-each>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>     
      <xsl:for-each select="./mif:bibref/mif:xref/*|
                            ./mif:xref/*[@refType='imex-primary']" >
        <xsl:value-of select="concat(./@db, ':&quot;', ./@id, '&quot;(', 
                                     ./@refType, ')' )"/>
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

 <!-- TAXID -->

 <xsl:template match="*" mode="taxid">
   <xsl:param name="fmode"/> 
   <xsl:param name="fid"/>

   <xsl:if test="$fmode = ''">
     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
       </xsl:attribute>
       <xsl:text>taxid</xsl:text>
     </xsl:element>
     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/> 
       </xsl:attribute>
       <xsl:value-of select="./@ncbiTaxId"/>
     </xsl:element>
   </xsl:if>

   <xsl:if test="not($fmode = '_o')">
     <xsl:element name="field">
       <xsl:attribute name="name">
         <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
       </xsl:attribute>
       <xsl:text>taxid:</xsl:text><xsl:value-of select="./@ncbiTaxId"/>
     </xsl:element>

     <xsl:if test="count(./mif:names/mif:fullName) = 1">
       <xsl:element name="field">
         <xsl:attribute name="name">
           <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
         </xsl:attribute>
         <xsl:value-of select="concat( 'taxid:',./@ncbiTaxId,'(&quot;',
                                       ./mif:names/mif:fullName,'&quot;)')" />
       </xsl:element>
       <xsl:element name="field">
           <xsl:attribute name="name">
             <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
           </xsl:attribute>
           <xsl:value-of select="./mif:names/mif:fullName"/>
       </xsl:element>
     </xsl:if>

     <xsl:if test="count(./mif:names/mif:shortLabel) = 1">
       <xsl:element name="field">
         <xsl:attribute name="name">
           <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
         </xsl:attribute>
         <xsl:value-of select="concat('taxid:',./@ncbiTaxId, '(&quot;',
                                      ./mif:names/mif:shortLabel,'&quot;)')" />
       </xsl:element>
       <xsl:element name="field">
         <xsl:attribute name="name">
           <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
         </xsl:attribute>
         <xsl:value-of select="./mif:names/mif:shortLabel"/>
       </xsl:element>
     </xsl:if>
   </xsl:if>

    <xsl:if test="$fmode = '_o'">
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/><xsl:value-of select="$fmode"/>
        </xsl:attribute>

        <xsl:if test="count(./mif:names/mif:shortLabel) = 1">
          <xsl:value-of select="concat( 'taxid:',./@ncbiTaxId,'(&quot;',
                                        ./mif:names/mif:shortLabel,
                                        '&quot;)' )" />
        </xsl:if>
        <xsl:if test="count(./mif:names/mif:shortLabel) = 1 and 
                      count(./mif:names/mif:fullName) = 1">  
          <xsl:text>|</xsl:text>
        </xsl:if>
        <xsl:if test="count(./mif:names/mif:fullName) = 1">
          <xsl:value-of select="concat( 'taxid:',./@ncbiTaxId,'(&quot;',
                                        ./mif:names/mif:fullName,
                                        '&quot;)' )" />
        </xsl:if>
      </xsl:element>
    </xsl:if> 
  </xsl:template>

 <!-- SOURCE -->

  <xsl:template match="*" mode="source">
    <xsl:element name="field">
      <xsl:attribute name="name">source_o</xsl:attribute>
      <xsl:value-of select="concat( ./mif:xref/mif:primaryRef/@db,':&quot;',
                                    ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                    ./mif:names/mif:shortLabel/text(),')' )" /> 
    </xsl:element>
  </xsl:template>

 <!-- XREF --> 

  <xsl:template match="*" mode="xref">
    <xsl:param name="fid"/>    

    <xsl:element name="field">
      <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
      <xsl:value-of select="./@db"/>
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
      <xsl:value-of select="./@id"/> 
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
      <xsl:value-of select="concat(./@db,':',./@id)"/> 
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
      <xsl:value-of select="concat(./@db,':',./@id,'(',@refType,')' )"/> 
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_s')"/>
      </xsl:attribute>
      <xsl:value-of select="concat(./@db,':',./@id)"/> 
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_s')"/>
      </xsl:attribute>
      <xsl:value-of select="concat(./@db,':',./@id,'(',@refType,')' )"/> 
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>      
      <xsl:for-each select=".">        
        <xsl:value-of select="concat( ./@db, ':&quot;', 
                                      ./@id, '&quot;(', @refType, ')' )"/>
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

 <!-- ROLES --> 

  <xsl:template match="*" mode="role" >
    <xsl:param name="fid"/>    
    <xsl:param name="skip_o"/>    

    <xsl:apply-templates select="." mode="_cvterm">
      <xsl:with-param name="fid">
         <xsl:value-of select="$fid"/>
      </xsl:with-param>
      <xsl:with-param name="skip_o">
         <xsl:value-of select="$skip_o"/>
      </xsl:with-param>       
    </xsl:apply-templates>

  </xsl:template>

  <xsl:template match="*" mode="role-list">
    <xsl:param name="fid"/>

    <xsl:apply-templates select="*" mode="role">
      <xsl:with-param name="skip_o">yes</xsl:with-param>
      <xsl:with-param name="fid" select="$fid" />
    </xsl:apply-templates>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>
      <xsl:for-each select="*">
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':&quot;',
                                     ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

  <!-- HOSTS -->

  <xsl:template match="*" mode="host-list">

    <xsl:apply-templates select="*" mode="taxid">
      <xsl:with-param name="fmode"></xsl:with-param>
      <xsl:with-param name="fid">taxidHost</xsl:with-param>
    </xsl:apply-templates>

    <xsl:apply-templates select="*" mode="taxid">
      <xsl:with-param name="fmode">_s</xsl:with-param>
      <xsl:with-param name="fid">taxidHost</xsl:with-param>
    </xsl:apply-templates>

    <xsl:element name="field">
      <xsl:attribute name="name">taxidHost_o</xsl:attribute>
      <xsl:for-each select="*">
        <xsl:value-of select="concat('taxid:',./@ncbiTaxId,'(&quot;',
                                     ./mif:names/mif:shortLabel/text(),
                                     '&quot;)')" />
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

  <!-- CONFIDENCE -->

  <xsl:template match="*" mode="confidence-list" >  
    <xsl:element name="field">
      <xsl:attribute name="name">confidence_o</xsl:attribute>    

      <xsl:for-each select="./mif:confidence">
        <xsl:value-of 
           select="concat(./mif:unit/mif:names/mif:shortLabel/text(), ':',
                          ./mif:value/text() )" />
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

  <xsl:template match="*" mode="i9r-type">       
    <xsl:param name="fid"/>

    <xsl:apply-templates select="." mode="_cvterm">
      <xsl:with-param name="fid">
         <xsl:value-of select="$fid"/>    
      </xsl:with-param>
    </xsl:apply-templates>
  </xsl:template>    

  <!-- NEGATIVE --> 

  <xsl:template match="*" mode="int-negative">
    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:text>negative</xsl:text>
      </xsl:attribute>
      <xsl:value-of select="./text()" />
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:text>negative_s</xsl:text>
      </xsl:attribute>
      <xsl:value-of select="./text()" />
    </xsl:element>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:text>negative_o</xsl:text>
      </xsl:attribute>
      <xsl:value-of select="./text()" />
    </xsl:element>

  </xsl:template>

  <!-- CVTERM: generic template -->

  <xsl:template match="*" mode="_cvterm">
    <xsl:param name="fid"/>
    <xsl:param name="skip"/>
    <xsl:param name="skip_s"/>
    <xsl:param name="skip_o"/>

    <xsl:if test="not($skip = 'yes')">
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="./mif:xref/mif:primaryRef/@db" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="./mif:xref/mif:primaryRef/@id" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':',
                                     ./mif:xref/mif:primaryRef/@id)" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="./mif:names/mif:shortLabel/text()" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':',
                                     ./mif:xref/mif:primaryRef/@id,'(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
      </xsl:element>
    </xsl:if>
   
    <xsl:if test="not($skip_s = 'yes')">
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':',
                                   ./mif:xref/mif:primaryRef/@id)" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="./mif:names/mif:shortLabel/text()" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':',
                                     ./mif:xref/mif:primaryRef/@id,'(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
      </xsl:element>
    </xsl:if>

    <xsl:if test="not($skip_o = 'yes')"> 
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_o')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':&quot;',
                                     ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
      </xsl:element>
    </xsl:if>

  </xsl:template>

  <xsl:template match="*" mode="_cvterm_list">
    <xsl:param name="fid"/>
    <xsl:param name="skip"/>
    <xsl:param name="skip_s"/>
    <xsl:param name="skip_o"/>

    <xsl:apply-templates mode="_cvterm" select="*">
      <xsl:with-param name="fid">
        <xsl:value-of select="$fid"/>
      </xsl:with-param>
      <xsl:with-param name="skip_o">yes</xsl:with-param>
    </xsl:apply-templates>
    
    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>
      <xsl:for-each select="*">
        <xsl:value-of select="concat(./mif:xref/mif:primaryRef/@db,':&quot;',
                                     ./mif:xref/mif:primaryRef/@id,'&quot;(',
                                     ./mif:names/mif:shortLabel/text(),')')" />
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
         </xsl:if>
      </xsl:for-each>
    </xsl:element>
    
  </xsl:template>

  <xsl:template name="spoke">
   <xsl:param name="fid"/>
   <xsl:call-template name="_cvterm">
     <xsl:with-param name="fid">
       <xsl:value-of select="$fid"/>
     </xsl:with-param>
     <xsl:with-param name="ns">psi-mi</xsl:with-param>
     <xsl:with-param name="ac">MI:1060</xsl:with-param>
     <xsl:with-param name="name">spoke expansion</xsl:with-param>
   </xsl:call-template>
  </xsl:template>

  <xsl:template name="_cvterm">
   <xsl:param name="fid"/> 
   <xsl:param name="ns"/>
   <xsl:param name="ac"/>
   <xsl:param name="name"/>
   <xsl:param name="skip"/>
   <xsl:param name="skip_s"/>
   <xsl:param name="skip_o"/>

   <xsl:if test="not($skip = 'yes')">
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="$ns" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="$ac" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="concat($ns,':', $ac)" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="$name" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="$fid"/>
        </xsl:attribute>
        <xsl:value-of select="concat( $ns, ':', $ac, '(' ,$name,')')" />
      </xsl:element>
    </xsl:if>

    <xsl:if test="not($skip_s = 'yes')">
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat($ns,':',$ac)" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="$name" />
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat($ns,':',$ac,'(', $name, ')' )" />
      </xsl:element>
    </xsl:if>

    <xsl:if test="not($skip_o = 'yes')"> 
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_o')"/>
        </xsl:attribute>
        <xsl:value-of select="concat($ns,':&quot;',$ac,'&quot;(',$name,')')" />
      </xsl:element>
    </xsl:if>
 
 </xsl:template>

  <!-- named templates -->

  <xsl:template name="id-list">
    <xsl:param name="fid"/>    
    <xsl:param name="list"/>    

    <xsl:for-each select='$list'> 
      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="./@db"/>
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="./@id"/> 
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="concat(./@db,':',./@id)"/> 
      </xsl:element>
      
      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./@db,':',./@id)"/> 
      </xsl:element>

    </xsl:for-each>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>      
      <xsl:for-each select="$list">        
        <xsl:value-of select="concat( ./@db, ':&quot;', 
                                      ./@id, '&quot;' )"/>
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

  <xsl:template name="xref-list">
    <xsl:param name="fid"/>    
    <xsl:param name="list"/>    
    <xsl:param name="type">false</xsl:param>    

    <xsl:for-each select='$list'> 
      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="./@db"/>
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="./@id"/> 
      </xsl:element>

      <xsl:element name="field">
        <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
        <xsl:value-of select="concat(./@db,':',./@id)"/> 
      </xsl:element>

     <xsl:if test="$type = 'true'">
       <xsl:element name="field">
         <xsl:attribute name="name"><xsl:value-of select="$fid"/></xsl:attribute>
         <xsl:value-of select="concat(./@db,':',./@id,'(',@refType,')' )"/> 
       </xsl:element>
     </xsl:if>

      <xsl:element name="field">
        <xsl:attribute name="name">
          <xsl:value-of select="concat($fid,'_s')"/>
        </xsl:attribute>
        <xsl:value-of select="concat(./@db,':',./@id)"/> 
      </xsl:element>

      <xsl:if test="$type = 'true'">
        <xsl:element name="field">
          <xsl:attribute name="name">
            <xsl:value-of select="concat($fid,'_s')"/>
          </xsl:attribute>
          <xsl:value-of select="concat(./@db,':',./@id,'(',@refType,')' )"/> 
        </xsl:element>
      </xsl:if>
    </xsl:for-each>

    <xsl:element name="field">
      <xsl:attribute name="name">
        <xsl:value-of select="concat($fid,'_o')"/>
      </xsl:attribute>      
      <xsl:for-each select="$list">        
        <xsl:choose> 
          <xsl:when test="$type = 'true'">
            <xsl:value-of select="concat( ./@db, ':&quot;', 
                                          ./@id, '&quot;(', @refType, ')' )"/>
          </xsl:when> 
          <xsl:otherwise>
            <xsl:value-of select="concat( ./@db, ':&quot;', 
                                          ./@id, '&quot;' )"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="not(position()=last())">
           <xsl:text>|</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:element>

  </xsl:template>

</xsl:stylesheet>
