<?xml version = '1.0' encoding = 'ISO-8859-1'?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or impliedor.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->
<web-app
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
        metadata-complete="false"
        version="3.0">


    <!-- MyFaces -->

    <!--<context-param>-->
    <!--<description>Comma separated list of URIs of (additional) faces config files.-->
    <!--(e.g. /WEB-INF/my-config.xml)-->
    <!--See JSF 1.0 PRD2, 10.3.2-->
    <!--Attention: You do not need to put /WEB-INF/faces-config.xml in here.-->
    <!--</description>-->
    <!--<param-name>javax.faces.CONFIG_FILES</param-name>-->
    <!--<param-value>/WEB-INF/navigation-faces-config.xml</param-value>-->
    <!--</context-param>-->
    <context-param>
        <description>State saving method: "client" or "server" (= default)
            See JSF Specification 2.5.3
        </description>
        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
        <param-value>client</param-value>
    </context-param>
    <!--<context-param>-->
    <!--<description>Only applicable if state saving method is "server" (= default).-->
    <!--Defines the amount (default = 20) of the latest views are stored in session.-->
    <!--</description>-->
    <!--<param-name>org.apache.myfaces.NUMBER_OF_VIEWS_IN_SESSION</param-name>-->
    <!--<param-value>20</param-value>-->
    <!--</context-param>-->
    <!--<context-param>-->
    <!--<description>Only applicable if state saving method is "server" (= default).-->
    <!--If true (default) the state will be serialized to a byte stream before it-->
    <!--is written to the session.-->
    <!--If false the state will not be serialized to a byte stream.-->
    <!--</description>-->
    <!--<param-name>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</param-name>-->
    <!--<param-value>true</param-value>-->
    <!--</context-param>-->
    <!--<context-param>-->
    <!--<description>Only applicable if state saving method is "server" (= default) and if-->
    <!--org.apache.myfaces.SERIALIZE_STATE_IN_SESSION is true (= default)-->
    <!--If true (default) the serialized state will be compressed before it-->
    <!--is written to the session. If false the state will not be compressed.-->
    <!--</description>-->
    <!--<param-name>org.apache.myfaces.COMPRESS_STATE_IN_SESSION</param-name>-->
    <!--<param-value>true</param-value>-->
    <!--</context-param>-->
    <context-param>
        <description>This parameter tells MyFaces if javascript code should be allowed in the
            rendered HTML output.
            If javascript is allowed, command_link anchors will have javascript code
            that submits the corresponding form.
            If javascript is not allowed, the state saving info and nested parameters
            will be added as url parameters.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
        <param-value>false</param-value>
    </context-param>
    <context-param>
        <description>If true, rendered HTML code will be formatted, so that it is "human readable".
            i.e. additional line separators and whitespace will be written, that do not
            influence the HTML code.
            Default: "true"
        </description>
        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <description>If true, a javascript function will be rendered that is able to restore the
            former vertical scroll on every request. Convenient feature if you have pages
            with long lists and you do not want the browser page to always jump to the top
            if you trigger a link or button action that stays on the same page.
            Default: "false"
        </description>
        <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>Used for encrypting view state. Only relevant for client side
            state saving. See MyFaces wiki/web site documentation for instructions
            on how to configure an application for diffenent encryption strengths.
        </description>
        <param-name>org.apache.myfaces.SECRET</param-name>
        <param-value>NzY1NDMyMTA=</param-value>
    </context-param>

    <context-param>
        <description>
            Validate managed beans, navigation rules and ensure that forms are not nested.
        </description>
        <param-name>org.apache.myfaces.VALIDATE</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>
            Whether to enable custom error handling or not
        </description>
        <param-name>org.apache.myfaces.ERROR_HANDLING</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>
            If you want to use a different resource template file than
            "META-INF/rsc/myfaces-dev-error.xml" this param let you configure
            it. (since 1.2.4-SNAPSHOT and 1.1.6-SNAPSHOT)
        </description>
        <param-name>org.apache.myfaces.ERROR_TEMPLATE_RESOURCE</param-name>
        <param-value>/error/ebi-dev-error.xml</param-value>
    </context-param>


    <!-- Facelets -->

    <context-param>
        <param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
        <param-value>com.sun.facelets.FaceletViewHandler</param-value>
    </context-param>

    <context-param>
        <param-name>facelets.DEVELOPMENT</param-name>
        <param-value>false</param-value>
    </context-param>

    <!-- Spring resources -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:/META-INF/*.spring.xml,
            classpath*:/META-INF/psicquic-clustering.spring.xml
        </param-value>
    </context-param>

    <!-- Use Documents Saved as *.xhtml -->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>

    <!-- Facelets -->
    <context-param>
        <param-name>facelets.SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>facelets.LIBRARIES</param-name>
        <param-value>/WEB-INF/psicquicview.taglib.xml;
            /WEB-INF/mitab-functions.taglib.xml;
            /WEB-INF/extlinks.taglib.xml;
            /WEB-INF/psicquic-miscel.taglib.xml;
        </param-value>
    </context-param>


    <!-- Trinidad -->

    <context-param>
        <description>
            Trinidad also supports an optimized strategy for caching some
            view state at an application level, which significantly improves
            scalability. However, it makes it harder to develop (updates to
            pages will not be noticed until the server is restarted), and in
            some rare cases cannot be used for some pages (see Trinidad
            documentation for more information)
        </description>
        <param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            If this parameter is enabled, Trinidad will automatically
            check the modification date of your JSPs, and discard saved
            state when they change; this makes development easier,
            but adds overhead that should be avoided when your application
            is deployed
        </description>
        <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
        <param-value>${debug}</param-value>
    </context-param>

    <context-param>
        <description>
            Enables Change Persistence at a session scope. By default,
            Change Persistence is entirely disabled. The ChangeManager is
            an API, which can persist component modifications (like,
            is a showDetail or tree expanded or collapsed). For providing
            a custom Change Persistence implementation inherit from the
            Trinidad API's ChangeManager class. As the value you have
            to use the fullqualified class name.
        </description>
        <param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
        <param-value>session</param-value>
    </context-param>

    <context-param>
        <description>
            Apache Trinidad by default obfuscates the Javascript it delivers to the client, as well as stripping
            comments and whitespace. This dramatically reduces the size of our Javascript download, but also makes it
            tricky to debug the Javascript. This flag can be set to true to turn off the obfuscation.
        </description>
        <param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            Apache Trinidad by default compresses the style class names inside the css that is generated on the server.
            However, when developing custom Trinidad skins, it is much easier to work with the non-compressed style
            class names, which much more directly relate to those used in the skin css file. This flag can be set to
            turn off
            automatic compression of style class names.
        </description>
        <param-name>org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <description>
            Trinidad supports two dialog implementations. The default implementation pops a new browser window, but may
            be subject to popup blocking issues depending on the browser. The alternative lightweight implementation
            uses a skinnable modal iframe that hovers over the existing page. This flag can be set to turn on
            lightweight dialogs.
        </description>
        <param-name>org.apache.myfaces.trinidad.ENABLE_LIGHTWEIGHT_DIALOGS</param-name>
        <param-value>true</param-value>
    </context-param>

    <!-- Orchestra Filter -->
    <filter>
        <filter-name>orchestraFilter</filter-name>
        <filter-class>org.apache.myfaces.orchestra.filter.OrchestraServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>orchestraFilter</filter-name>
        <servlet-name>faces</servlet-name>
    </filter-mapping>

    <filter>
        <filter-name>trinidad</filter-name>
        <filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>trinidad</filter-name>
        <servlet-name>faces</servlet-name>
    </filter-mapping>

    <!-- spring security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Intact view listener -->
    <listener>
        <description>Listener to startup the application</description>
        <listener-class>org.hupo.psi.mi.psicquic.view.webapp.ApplicationInitializer</listener-class>
    </listener>

    <!-- shutdown listener -->
    <listener>
        <listener-class>org.hupo.psi.mi.psicquic.view.webapp.application.ShutDownHook</listener-class>
    </listener>

    <!-- Spring Framework 2.0 -->
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>

    <!-- Orchestra stuff -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.apache.myfaces.orchestra.conversation.servlet.ConversationManagerSessionListener
        </listener-class>
    </listener>

    <!-- Faces Servlet -->
    <servlet>
        <servlet-name>faces</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    </servlet>

    <!-- resource loader servlet -->
    <servlet>
        <servlet-name>resources</servlet-name>
        <servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
    </servlet>

    <!-- Faces Servlet Mappings -->
    <servlet-mapping>
        <servlet-name>faces</servlet-name>
        <url-pattern>*.xhtml</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>resources</servlet-name>
        <url-pattern>/adf/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>graphmlDownload</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.cytoscape.GraphmlServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>graphmlDownload</servlet-name>
        <url-pattern>/graphmlDownload</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>binaryDownload</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.io.file.FileDownloadServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>binaryDownload</servlet-name>
        <url-pattern>/binaryDownload</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>clusterDownload</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.controller.clustering.ClusteringDownloadServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>clusterDownload</servlet-name>
        <url-pattern>/clusterDownload</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>allDownload</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.io.download.DownloadAllServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>allDownload</servlet-name>
        <url-pattern>/allDownload</url-pattern>
    </servlet-mapping>

    <!-- Frontier guidelines servlets -->
    <servlet>
        <servlet-name>appHeaderSpecific</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.controller.servlet.AppHeaderSpecificServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>appHeaderSpecific</servlet-name>
        <url-pattern>/appHeaderSpecific</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>appMainHeader</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.controller.servlet.AppMainHeaderServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>appMainHeader</servlet-name>
        <url-pattern>/appMainHeader</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>appMainFooter</servlet-name>
        <servlet-class>org.hupo.psi.mi.psicquic.view.webapp.controller.servlet.AppMainFooterServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>appMainFooter</servlet-name>
        <url-pattern>/appMainFooter</url-pattern>
    </servlet-mapping>

    <!-- News feed -->
    <!--<servlet>-->
    <!--<servlet-name>feed</servlet-name>-->
    <!--<servlet-class>uk.ac.ebi.faces.webapp.NewsFeedServlet</servlet-class>-->
    <!--</servlet>-->

    <!--<servlet-mapping>-->
    <!--<servlet-name>feed</servlet-name>-->
    <!--<url-pattern>/feed</url-pattern>-->
    <!--</servlet-mapping>-->

    <!-- Welcome files -->
    <welcome-file-list>
        <welcome-file>/index.html</welcome-file>
    </welcome-file-list>

    <!-- Handling of the HTTP error 404(Not found) and 500(internal server error)-->
    <!--<error-page>-->
    <!--<error-code>404</error-code>-->
    <!--<location>/error/404.xhtml</location>-->
    <!--</error-page>-->

    <!--<error-page>-->
    <!--<error-code>500</error-code>-->
    <!--<location>/error/500.xhtml</location>-->
    <!--</error-page>-->

    <session-config>
        <session-timeout>120</session-timeout>
    </session-config>

</web-app>
